I".!<p><strong>所用环境</strong>：Ubuntu18.04</p>

<p>经过几次摸索，终于利用Raghuveer S的模板结合Jekyll 和GitHub Pages建立起自己的博客主页。本文会简要谈一下做这个主页的动机以及大致的创建过程。</p>

<p>之所以选择GitHub Pages主要是因为国内科技博客社区平台的备受唾弃的弊病和对国外其他平台不熟悉。由于CSDN等社区的技术博客管理相当混杂，同样的文章或碎片化的、或整篇地被抄袭和复制。针对BUG的解决方案，没有完整的使用场景、没有问题背景和相关解释，对于寻求帮助的人阅览痛苦不堪，长时间之后作者本人也难免遗忘其确切含义。这些问题积累相当长时间后积重难返、不免令人失望。此外，对我而言其排版样式也不讨人喜欢。缺乏用户体验和美学设计的页面充斥着广告，被BUG困扰的心绪更加杂乱。国外的博客平台由于使用原因了解的不多，在搜寻资料时偶然遇到的平台在干净简洁方面让我觉得耳目一新。但不熟悉和直观上的不自由让我妹有进一步了解了。在做网安汇报时发现的Chih-ling-hsu的主页<a href="https://chih-ling-hsu.github.io/">An Explorer of Things</a>给了我焕然一新的感觉，其简洁清晰又不失优美的页面深深地吸引了我，由此产生了使用GitHub Pages制作个人主页的想法。</p>

<h2 id="创建github-pages">创建GitHub Pages</h2>

<p>创建个人GitHub Pages的过程主要参考官方文档<a href="https://docs.github.com/en/pages">GitHub Pages Documentation</a>. 其实该文档已经包含了从创建、设计到维护的一整套内容流程。但我个人仅参考了其<a href="https://docs.github.com/en/pages/getting-started-with-github-pages">Getting started with GitHub Pages</a>部分创建了Repository。</p>

<h2 id="定制github-pages">定制GitHub Pages</h2>

<p>在创建Repository之后，就可以在其中编辑添加文件来修缮主页了。而我个人对网页制作知之甚少，故初步选择使用别人做好的模板进行修改来进行搭建。我使用的是<a href="https://github.com/raghuveerdotnet/simply-jekyll">simply-jekyll</a>主题(非常感谢作者Raghuveer S)。读者可以使用你发现的喜欢的个人主页的主题或者从以下网站挑选。</p>

<ul>
  <li>
    <p><a href="https://github.com/topics/jekyll-theme">jekyll-theme · GitHub Topics</a></p>
  </li>
  <li>
    <p><a href="https://jamstackthemes.dev/ssg/jekyll/">Jekyll Themes (jamstackthemes.dev)</a></p>
  </li>
  <li>
    <p><a href="http://jekyllthemes.org/">JekyllThemes.com</a></p>
  </li>
  <li>
    <p><a href="https://jekyllthemes.io/">JekyllThemes.io</a></p>
  </li>
</ul>

<p>网上搜寻的方法有Fork或直接以此模板创建Repository，我个人则是将其内容复制粘贴到我的Repo中。由于对Git与自由协议的了解还不够多，这里面的差异我还不太明白，暂行方法如此。</p>

<p>对Repo提交更新后，读者就已经有了一个完整的主页了，只是其内容还是原作者的。之后我们利用<code class="highlighter-rouge"> Jekyll</code>对网页进行修改和观察。详细可以参考其官方文档 <a href="https://jekyllrb.com/docs/">Quickstart | Jekyll</a>. 以下对其安装使用作简要介绍。</p>

<p><strong>Jekyll</strong>所需预配置如下：</p>

<ul>
  <li>Ruby version 2.4.0 or higher (check with <code class="highlighter-rouge">ruby -v</code>)</li>
  <li>RubyGems (check with <code class="highlighter-rouge">gem -v</code>)</li>
  <li>GCC and Make (check with <code class="highlighter-rouge">gcc -v</code>、<code class="highlighter-rouge">g++ -v</code>、<code class="highlighter-rouge">make -v</code>)</li>
</ul>

<p>预配置完成后安装Jekyll和bundler:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<p>可能会遇到下面的错误(顺利运行可忽略):</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>gem <span class="nb">install </span>jekyll bundler
Fetching: public_suffix-4.0.6.gem <span class="o">(</span>100%<span class="o">)</span>
Successfully installed public_suffix-4.0.6
...
Fetching: eventmachine-1.2.7.gem <span class="o">(</span>100%<span class="o">)</span>
Building native extensions. This could take a <span class="k">while</span>...
ERROR:  Error installing jekyll:
	ERROR: Failed to build gem native extension.
<span class="c"># below ellipsis</span>
</code></pre></div></div>

<p>运行如下命令解决:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>ruby-dev
</code></pre></div></div>

<p>顺利运行后进入主页Repo所在目录<code class="highlighter-rouge">./myblog</code>：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>myblog
</code></pre></div></div>

<p>检查下载依赖项：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle <span class="nb">install</span>
</code></pre></div></div>

<p>构建网站后可在本地 http://localhost:4000/ 查看：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>如果运行正常、效果满意，就可以利用Git提交更新页面，之后在就可以在主页看到其变动。</p>

<h2 id="更新维护github-pages">更新维护GitHub Pages</h2>

<p>GitHub Pages本质上是一个Repository，所以使用Git就可以对其进行修改。在本地修改查看后可以利用如下命令上传更新：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看工作区代码相对于暂存区的差别</span>
<span class="nv">$ </span>git status
<span class="c"># 将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录</span>
<span class="nv">$ </span>git add <span class="nb">.</span>
<span class="c"># 将缓存区内容添加到本地仓库</span>
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Update content"</span>
<span class="c"># 先将远程仓库master中的信息同步到本地仓库master中</span>
<span class="nv">$ </span>git pull origin main
<span class="c"># 将本地版本库推送到远程服务器</span>
<span class="nv">$ </span>git push origin main  
</code></pre></div></div>

<p>顺利运行后就可以在网页端查看改动后的版本了。</p>

<h2 id="补遗">补遗</h2>

<p>虽然我使用的是Unbuntu，但在Windows平台上的构建方法也类似。第一、二部分内容几乎完全相同，<strong>Jekyll</strong>预配置及下载部分建议参考官方文档的Windows部分。更新维护可以选择使用GitHub Desktop，有图形化的按钮可以使用。</p>

<p>这个页面版本仅仅是在快速解决要求下的一个初步版本，我最初设想按照个人喜好结合已有的各个模板的优点搭建，但限于时间和精力暂时作罢。后续会持续学习增进设计。当然这第一个版本，这第一篇博客有很多不尽满意的地方，但正如与beefbill讨论的，我们需要先有一个垃圾版本，才能不断学习优化，得到一个好的作品。再次感谢原作者Raghuveer S(如果你也喜欢不妨给他一个Star，如果我的文章有帮助，不妨也给我一个Star).</p>

<p>前文对CSDN等平台有所批评，但只是其存在缺点罢了。CSDN、简书、博客园等平台为我们这些小白提供了很多解决问题的建议和样例，尽管这个过程可能不那么美丽，但客观上这些平台给了我们莫大的帮助，也正因如此才有“面向CSDN编程”的嘲解。事物是在矛盾中不断进步的，我们正视问题，正应该朝着解决问题、补足缺点的方向进步。希望有朝一日，我们能有更规范的平台与中文资源，共勉。</p>
:ET